import java.util.*;
import java.applet.*;
import java.awt.*; 
import java.awt.event.*; 
import java.applet.Applet; 

class pointExt extends Point {

   public pointExt(int x, int y) {
      super(x, y);
   }
public void draw(Graphics g, int size) {
      g.fillOval(x - 4, y - 4, size, size);
      g.setColor(Color.white);
      g.fillOval(x - 2, y - 2, 2, 2);
   }
public void blink(Graphics g) {
      g.setColor(Color.yellow);
      g.fillOval(x - 5, y - 5, 10, 10);
      g.setColor(Color.white);
      g.fillOval(x - 3, y - 3, 2, 2);
   }
}

class Line {
   pointExt point1;
   pointExt point2;
   float    slope;
   boolean  slopeUndefine;
   public Line(pointExt p1, pointExt p2) {
      point1 = p1;
      point2 = p2;
      if (p1.x == p2.x)
         slopeUndefine = true;
      else {    
         if (p2.y == p1.y)
            slope = (float)0;
         else
            slope = (float) (p2.y - p1.y) / (p2.x - p1.x);
         slopeUndefine = false;
      }
   }

   public boolean onLeft(pointExt chkpt) {
      if (this.slopeUndefine) {
         if (chkpt.x < point1.x) 
         return true;
         else {
            if (chkpt.x == point1.x) {
               if (((chkpt.y > point1.y) && (chkpt.y < point2.y)) ||((chkpt.y > point2.y) && (chkpt.y < point1.y)))
                  return true;
               else
                  return false;
            }
            else return false;
         }
      }
      else {            
         int x3 = (int) (((chkpt.x + slope * (slope * point1.x - point1.y + chkpt.y)) /(1 + slope * slope)) * 10000);
         int y3 = (int) ((slope * (x3 / 10000 - point1.x) + point1.y) * 10000);

         if (slope == (float)0) {
            if ((chkpt.y*10000) > y3) return true; 
               else return false; }
         else { if (slope > (float)0)
          {  if (x3 > (chkpt.x * 10000)) 
               return true; 
          else 
               return false; }
                else {  if ((chkpt.x * 10000) > x3) 
                return true; 
                else 
                return false; }
              }
      }
   }

 public void draw(Graphics g) {
      g.drawLine(point1.x, point1.y, point2.x, point2.y);
   }
}

class SrcPanel extends Panel implements Runnable {
   Convexhullown Hull;
   Thread     t1;

   boolean runMode = false;
   public static final int QUICK = 2;
   int    algor = QUICK;
   int    preAlgor;

   public static final int ZERO = 0;
   public static final int FAST = 20;
   public static final int SLOW = 1000;
   int    speed = SLOW;

   Vector points = new Vector();
   Vector hull   = new Vector();
   Vector chkLns = new Vector();
   Vector tempLns = new Vector();
   pointExt currPt     = new pointExt(0,0);
   int cx, cy, cz;

   public SrcPanel(Convexhullown Hull) {
      this.Hull = Hull;
   }

  public synchronized boolean mouseDown(Event evt, int x, int y) {
      if (!runMode) {
         hull.removeAllElements();
      
         points.addElement(new pointExt(x, y));
         repaint();
      } 
      else {
	 stop();
	 hull.removeAllElements();
         points.addElement(new pointExt(x,y));
         repaint();
         start();
      }

      return true;
   }

   Image offscreen;
   Dimension offscreensize;
   Graphics offgraphics;
 public void paint(Graphics g) {
      Dimension d = size();
      g.setColor(Color.black);
      g.fillRect(0, 0, d.width, d.height);
   }

 public synchronized void update(Graphics g) {
      Dimension d = size();
      if ((offscreen == null) || (d.width != offscreensize.width) ||
          (d.height != offscreensize.height)) {
         offscreen = createImage(d.width, d.height);
         offscreensize = d;
         offgraphics = offscreen.getGraphics();
      }

      offgraphics.setColor(Color.white);
      offgraphics.fillRect(0, 0, d.width-1, d.height-1);
 
      int np = points.size();
      int nl = hull.size();

      for (int i = 0; i < np; i++) {
         Color ptcolor = Color.blue;
         offgraphics.setColor(ptcolor);
         ((pointExt) points.elementAt(i)).draw(offgraphics, 8);
      };

      for (int j = 0; j < nl; j++) {
         Color lncolor = Color.blue;
         offgraphics.setColor(lncolor);
         ((Line) hull.elementAt(j)).draw(offgraphics);
      }

      if (runMode) {
         currPt.blink(offgraphics);
         offgraphics.setColor(Color.red);
	 for (int k = 0; k < chkLns.size(); k++) {
	    ((Line)chkLns.elementAt(k)).draw(offgraphics);
         }  

         offgraphics.setColor(Color.gray);
      }

      g.drawImage(offscreen, 0, 0, null);
   }
   public void clearPoint() {
      chkLns.removeAllElements();
      hull.removeAllElements();
      points.removeAllElements();
      repaint();
   }
    public void setMethod(int method) {
    algor = QUICK;
   }

 public void run() {
      repaint();
      while (true) {
         if (runMode) {
            switch (algor) {
               case QUICK: hull.removeAllElements();
                           convexHull();
                           runMode = false;
			   repaint();
                           break;
               default:    System.out.println("Error in call algor\n");
            }
         
         }

         try { Thread.sleep(100); } catch (InterruptedException e) { break; }
      }
   }

 public void start() {
         t1 = new Thread(this);
      t1.setPriority(Thread.MAX_PRIORITY);
      t1.start();
   }

 public void stop() {
      t1.stop();
   }

 int indexChkLn = 0;
   Vector tempHull = new Vector();

   public void convexHull() {
      Vector P1 = new Vector();
      Vector P2 = new Vector();
      pointExt l = (pointExt)points.elementAt(0);
      pointExt r = (pointExt)points.elementAt(0);
      int minX = l.x;
      int maxX = l.x;
      int minAt = 0;
      int maxAt = 0;	

      chkLns.removeAllElements();
      tempLns.removeAllElements();
      tempHull.removeAllElements();
      for (int i = 1; i < points.size(); i++) {
         currPt = (pointExt) points.elementAt(i);	
         if (((pointExt)points.elementAt(i)).x > maxX) {
            r = (pointExt)points.elementAt(i);
            maxX = ((pointExt)points.elementAt(i)).x;
	    maxAt = i;
         };

         if (((pointExt)points.elementAt(i)).x < minX) {
            l = (pointExt)points.elementAt(i);
            minX = ((pointExt)points.elementAt(i)).x;
     	    minAt = i;
         };
	 repaint();
	 try { Thread.sleep(speed); } catch (InterruptedException e) {}

      }

      Line lr = new Line((pointExt) l, (pointExt) r);
      tempLns.addElement(new Line((pointExt) points.elementAt(maxAt),(pointExt) points.elementAt(minAt)));
      chkLns.addElement(new Line((pointExt) points.elementAt(maxAt),(pointExt) points.elementAt(minAt)));
      repaint();
      try { Thread.sleep(speed); } catch (InterruptedException e) {};

      for (int i = 0; i < points.size(); i++) {
	 if ((i != maxAt) && (i != minAt)) {
            currPt = (pointExt) points.elementAt(i);

            if (lr.onLeft((pointExt)points.elementAt(i))) {
               P1.addElement(new pointExt(((pointExt)points.elementAt(i)).x,((pointExt)points.elementAt(i)).y));
            } else {
               P2.addElement(new pointExt(((pointExt)points.elementAt(i)).x,((pointExt)points.elementAt(i)).y));
            }
            repaint();
            try { Thread.sleep(speed); } catch (InterruptedException e) {}
         }
	
      };
      P1.addElement(new pointExt(((pointExt)l).x, ((pointExt)l).y));
      P1.addElement(new pointExt(((pointExt)r).x, ((pointExt)r).y));

      P2.addElement(new pointExt(((pointExt)l).x, ((pointExt)l).y));
      P2.addElement(new pointExt(((pointExt)r).x, ((pointExt)r).y));
      quick(P1, l, r, 0);
      for (int i=0; i<tempLns.size(); i++) {
        chkLns.addElement(new Line((pointExt) ((Line)tempLns.elementAt(i)).point1, 
     	                           (pointExt) ((Line)tempLns.elementAt(i)).point2));
        repaint();
        try { Thread.sleep(speed); } catch (InterruptedException e) {break;};

	for (int j=0; j<points.size(); j++) {
          if (((Line)tempLns.elementAt(i)).onLeft((pointExt)points.elementAt(j))) {	
               currPt = (pointExt) points.elementAt(j);
	       repaint();
               try { Thread.sleep(speed); } catch (InterruptedException e) {break;};
          }
        }
      }

      for (int k=0; k<tempHull.size(); k++) {
         hull.addElement(new Line((pointExt) ((Line)tempHull.elementAt(k)).point1,(pointExt) ((Line)tempHull.elementAt(k)).point2));
      }		
      chkLns.removeAllElements();
      tempLns.removeAllElements();
      quick(P2, l, r, 1);
      for (int i=0; i<tempLns.size(); i++) {
        chkLns.addElement(new Line((pointExt) ((Line)tempLns.elementAt(i)).point1,(pointExt) ((Line)tempLns.elementAt(i)).point2));
        repaint();
        try { Thread.sleep(speed); } 
        catch (InterruptedException e) 
        {break;};

	for (int j=0; j<points.size(); j++) {
          if (!((Line)tempLns.elementAt(i)).onLeft((pointExt)points.elementAt(j))) {	
               currPt = (pointExt) points.elementAt(j);
	       repaint();
               try { Thread.sleep(speed); } catch (InterruptedException e) {break;};
          }
        }
      }
      for (int k=0; k<tempHull.size(); k++) {
         hull.addElement(new Line((pointExt) ((Line)tempHull.elementAt(k)).point1,
                                  (pointExt) ((Line)tempHull.elementAt(k)).point2));
      }

      chkLns.removeAllElements();
    
   }

 public synchronized void quick(Vector P, pointExt l, pointExt r, int faceDir) {
      if (P.size() == 2) {
         tempHull.addElement(new Line((pointExt) P.elementAt(0),(pointExt) P.elementAt(1)));
         return;
      } else {
	 int hAt = splitAt(P, l, r);
         Line lh = new Line((pointExt) l, (pointExt) P.elementAt(hAt));
         Line hr = new Line((pointExt) P.elementAt(hAt), (pointExt) r);
         Vector P1 = new Vector();
         Vector P2 = new Vector();

         for (int i = 0; i < (P.size() - 2); i++) {
	    if (i != hAt) {
               currPt = (pointExt) P.elementAt(i);
	       if (faceDir == 0) {
                  if (lh.onLeft((pointExt)P.elementAt(i))) {
                     P1.addElement(new pointExt(((pointExt)P.elementAt(i)).x,((pointExt)P.elementAt(i)).y));
                  }
		  if ((hr.onLeft((pointExt)P.elementAt(i)))) {
                  P2.addElement(new pointExt(((pointExt)P.elementAt(i)).x,((pointExt)P.elementAt(i)).y));
                  }
 	       } else {
                  if (!(lh.onLeft((pointExt)P.elementAt(i)))) {
                     P1.addElement(new pointExt(((pointExt)P.elementAt(i)).x,((pointExt)P.elementAt(i)).y));
                  };
	
	          if (!(hr.onLeft((pointExt)P.elementAt(i)))) {
                  P2.addElement(new pointExt(((pointExt)P.elementAt(i)).x,((pointExt)P.elementAt(i)).y));
                  }; 
	       };
            }
         }
         P1.addElement(new pointExt(((pointExt)l).x, ((pointExt)l).y));
         P1.addElement(new pointExt(((pointExt)P.elementAt(hAt)).x, ((pointExt)P.elementAt(hAt)).y));
         P2.addElement(new pointExt(((pointExt)P.elementAt(hAt)).x, ((pointExt)P.elementAt(hAt)).y));
         P2.addElement(new pointExt(((pointExt)r).x, ((pointExt)r).y));
	 
	 pointExt h = new pointExt(((pointExt)P.elementAt(hAt)).x,((pointExt)P.elementAt(hAt)).y);

         tempLns.addElement(new Line((pointExt) l, (pointExt) h));
         tempLns.addElement(new Line((pointExt) h, (pointExt) r));

 	 if (faceDir == 0) {
            quick(P1, l, h, 0);
            quick(P2, h, r, 0);
	 } else {
	    quick(P1, l, h, 1);
            quick(P2, h, r, 1);
         }
      return;
      }
   }

 public synchronized int splitAt(Vector P, pointExt l, pointExt r) {
      double    maxDist = 0;
      Line newLn = new Line((pointExt) l, (pointExt) r);

      int x3 = 0, y3 = 0;
      double distance = 0;
      int farPt = 0;

      for (int i = 0; i < (P.size() - 2); i++) {
         if (newLn.slopeUndefine) {
            x3 = l.x;
            y3 = ((pointExt)P.elementAt(i)).y;
         } else {
            if (r.y == l.y) {
               x3 = ((pointExt)P.elementAt(i)).x;
               y3 = l.y;
            } else {
                  x3 = (int) (((((pointExt)P.elementAt(i)).x + newLn.slope *
                                (newLn.slope * l.x - l.y +
                                ((pointExt)P.elementAt(i)).y))
                              / (1 + newLn.slope * newLn.slope)));
                  y3 = (int) ((newLn.slope * (x3 - l.x) + l.y));
            }
         }
         int x1 = ((pointExt)P.elementAt(i)).x;
         int y1 = ((pointExt)P.elementAt(i)).y;
         distance = Math.sqrt(Math.pow((y1-y3), 2) + Math.pow((x1-x3), 2));

         if (distance > maxDist) {
            maxDist = distance;
            farPt = i;
         }
      }
      return farPt;
   }
}

public class Convexhullown extends Applet implements ItemListener
{
   SrcPanel srcPanel;
   Button   clearButton, doneButton;
   Label   algorithm;
   Choice speed;
 
   public void init() {
      setLayout(new BorderLayout());
      srcPanel = new SrcPanel(this);
      add("Center", srcPanel);
      Panel ctrlPanel = new Panel();
      add("North", ctrlPanel);

      algorithm = new Label("GRAHM SCAN");
      ctrlPanel.add(algorithm);

      speed = new Choice();
      speed.addItem("Slow Demo");
      speed.addItem("Fast Demo");
      speed.addItem("No Delay");
      ctrlPanel.add(speed);
      clearButton = new Button("CLEAR");
      ctrlPanel.add(clearButton);
      doneButton  = new Button("RUN.");
      ctrlPanel.add(doneButton);
      speed.addItemListener(this); 
    }

   public void start() {
      srcPanel.start();
   }

   public void stop() {
      srcPanel.stop();
   }

public void itemStateChanged(ItemEvent e)
{
String op=speed.getSelectedItem();
  if(op=="Slow Demo")
  {
   srcPanel.speed = SrcPanel.SLOW;
  }
  if(op=="Fast Demo")
  {
srcPanel.speed = SrcPanel.FAST;
  }

  if(op=="No Delay")
  {
srcPanel.speed = SrcPanel.ZERO;
  }
           
  }
  
  
   public boolean action(Event e, Object arg) 
   {
      if (e.target instanceof Button) {
            srcPanel.preAlgor = srcPanel.algor;
            srcPanel.setMethod(SrcPanel.QUICK);
            srcPanel.runMode = true;
         };

         if ((e.target).equals(clearButton)) {
            if (!srcPanel.runMode) {
               srcPanel.clearPoint();
            } else {
	       srcPanel.stop();
               srcPanel.runMode = false;
               srcPanel.clearPoint();
               srcPanel.start();
            }	
         };

         if ((e.target).equals(doneButton)) {
            if (srcPanel.points.size() > 2 ) 
               srcPanel.runMode = true;
         };

 

      return true;
}
}
